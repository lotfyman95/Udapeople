version: 2.1

commands:

  install_tar:
    steps:
      - run:
          name: Installing compression tools (Tar, gzip)
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl software-properties-common

  install_awscli:
    description: install aws cli v2
    steps:
      - run:
          name: Installing aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: install ansible
    steps:
      - run:
          name: Installing ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_node:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install --global n
            sudo n 13.8.0
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
  
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependency]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dependency

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependency]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependency

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependency]
      - run:
          name: front unit test
          command: |
            cd frontend
            npm install
            npm test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependency]
      - run:
          name: Back unit test
          command: |
            cd backend
            npm install
            npm test
             
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependency]
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependency]
      - run:
          name: backend scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_tar
      - run:
          name: Ensure back-end infrastructure exists
          command: |
                aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"   
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["a1:56:c6:ed:b7:68:d6:4e:ba:10:51:cb:fe:c4:19:21"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml       
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations      
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            yum install -y python3 python3-pip
            # script to install Node.js onto Fedora based systems
            curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
               BACKEND_IP=$(aws ec2 describe-instances \
               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text)
               echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
               cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 

  deploy-backend:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a1:56:c6:ed:b7:68:d6:4e:ba:10:51:cb:fe:c4:19:21"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install tar gzip unzip
            sudo apt install nodejs npm
            sudo apt install ansible
            # install aws
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Build backend app
          command: |
           cd backend
           npm i
           npm run build
           cd ..
           tar -C backend -czvf artifact.tar.gz .
           cd .circleci/ansible
           echo "Contents  of the inventory.txt file is -------"
           cat inventory.txt
           ansible-playbook -i inventory.txt deploy-backend.yml    
      - destroy-environment
      - revert-migrations 
       
  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_node
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              # This is the intentional error, if "Welcome" is indeed in the response this step will exit with exit code 1
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations
  cloudfront-update:
        docker:
        - image: amazon/aws-cli
        steps:
        - checkout
        - install_awscli
        - install_node
        - run:
            name: Save Old Workflow ID to kvdb.io
            command: |
              export OldWorkflowID=$(aws --region us-east-1 cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
              echo "Old Wokflow ID: $OldWorkflowID"
              curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OldWorkflowID}"

        - run:
            name: Update cloudfront distribution
            command: |
              aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --region us-east-1 \
        - destroy-environment
        - revert-migrations


#  cloudfront-update:
#     docker:
#       - image: amazon/aws-cli
    # steps:
    #   - checkout
    #   - run:
    #       name: Save Old Workflow ID to kvdb.io
    #       command: |
    #         export OldWorkflowID=$(aws --region us-west-1 cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
    #         echo "Old Wokflow ID: $OldWorkflowID"
    #         curl https://kvdb.io/${KVDB_BUCKET_ID}/old_workflow_id -d "${OldWorkflowID}"

  
            # name: Save Old Workflow ID to kvdb.io
            # command: |
            #     # export OLD_WORKFLOW_ID=$(aws cloudformation \
            #     #         list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            #     #         --no-paginate --output text)
            #     # echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            #     # curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
            #             name: Update cloudfront distribution
            # command: |
            #     aws cloudformation deploy \
            #     --template-file .circleci/files/cloudfront.yml \
            #     --stack-name udapeople-cloudfront \
            #     --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            #check

#update
#god
#hi
# I am bored
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend] 
      - cloudfront-update:
          requires: [smoke-test]
