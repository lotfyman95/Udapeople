---
- name: "configuration play." 
  hosts: web
  user: ubuntu
  gather_facts: false
  vars:
    - ansible_python_interpreter: /usr/bin/python3
    - ansible_host_key_checking: false
    - ansible_stdout_callback: yaml
    - NODE_ENV: production
    - ENVIRONMENT: production
    - TYPEORM_CONNECTION: postgres
    - TYPEORM_ENTITIES: ./src/modules/domain/**/*.entity.ts
    - TYPEORM_MIGRATIONS: ./src/migrations/*.ts
    - TYPEORM_MIGRATIONS_DIR: ./src/migrations
    - TYPEORM_HOST: "{{ lookup('env','TYPEORM_HOST') }}"
    - TYPEORM_PORT: "{{ lookup('env','TYPEORM_PORT') }}"
    - TYPEORM_USERNAME: "{{ lookup('env','TYPEORM_USERNAME') }}"
    - TYPEORM_PASSWORD: "{{ lookup('env','TYPEORM_PASSWORD') }}"
    - TYPEORM_DATABASE: "{{ lookup('env','TYPEORM_DATABASE') }}"
  roles:
    - role: weareinteractive.environment
      become: true
    # - role: configure-server
    #   become: true
    - role: deploy
      become: true

















# ---
# - name: "configuration play." 
#   hosts: web
#   user: ubuntu
#   become: true
#   become_method: sudo
#   become_user: root  
#   gather_facts: false
#   vars:
#     - ansible_python_interpreter: /usr/bin/python3
#     - ansible_host_key_checking: false
#     - ansible_stdout_callback: yaml
    
#   pre_tasks:
#     - name: Loading environment variables
#       tags: always
#       set_fact:
#         TYPEORM_CONNECTION: "{{ lookup('env','TYPEORM_CONNECTION') }}"
#         TYPEORM_HOST: "{{ lookup('env','TYPEORM_HOST') }}"
#         TYPEORM_PORT: "{{ lookup('env', 'TYPEORM_PORT') }}"
#         TYPEORM_USERNAME: "{{ lookup('env','TYPEORM_USERNAME') }}"
#         TYPEORM_PASSWORD: "{{ lookup('env','TYPEORM_PASSWORD') }}"
#         TYPEORM_DATABASE: "{{ lookup('env','TYPEORM_DATABASE') }}"
#         TYPEORM_MIGRATIONS: "{{ lookup('env','TYPEORM_MIGRATIONS') }}"
#         TYPEORM_ENTITIES: "{{ lookup('env','TYPEORM_ENTITIES') }}"

#     - name: extract artifact
#       become: yes
#       unarchive:
#         src: files/artifact.tar.gz
#         dest: .
    
#     - name: start app
#       become: yes
#       shell: |
#         npm install
#         pm2 stop all
#         pm2 start npm --name "udapeople-backend" -- run start
#       environment:
#         NODE_ENV: "{{ lookup('env', 'NODE_ENV') }}"
#         VERSION: "{{ lookup('env', 'VERSION') }}"
#         TYPEORM_CONNECTION: "{{ lookup('env', 'TYPEORM_CONNECTION') }}"
#         TYPEORM_MIGRATIONS_DIR: "{{ lookup('env', 'TYPEORM_MIGRATIONS_DIR') }}"
#         TYPEORM_ENTITIES: "{{ lookup('env', 'TYPEORM_ENTITIES') }}"
#         TYPEORM_MIGRATIONS: "{{ lookup('env', 'TYPEORM_MIGRATIONS') }}"
#         TYPEORM_HOST: "{{ lookup('env', 'TYPEORM_HOST') }}"
#         TYPEORM_PORT: "{{ lookup('env', 'TYPEORM_PORT') }}"
#         TYPEORM_USERNAME: "{{ lookup('env', 'TYPEORM_USERNAME') }}"
#         TYPEORM_PASSWORD: "{{ lookup('env', 'TYPEORM_PASSWORD') }}"
#         TYPEORM_DATABASE: "{{ lookup('env', 'TYPEORM_DATABASE') }}"
            
#     - name: "Set pm2 start as service"
#       become: yes
#       shell: |
#         env PATH=$PATH:/usr/local/bin pm2 startup -u ubuntu
#     - name: check pm2 status
#       become: yes
#       shell: |
#         pm2 describe "udapeople-backend"
#       register: command_output_npm
#     - debug: var=command_output_npm.stdout_lines


































# ---
# - name: "configuration play." 
#   hosts: web
#   user: ubuntu
#   become: true
#   become_method: sudo
#   become_user: root  
#   gather_facts: false
#   vars:
#     - ansible_python_interpreter: /usr/bin/python3
#     - ansible_host_key_checking: false
#     - ansible_stdout_callback: yaml
    
#   pre_tasks:
#     - name: Loading environment variables
#       tags: always
#       set_fact:
#         TYPEORM_CONNECTION: "{{ lookup('env','TYPEORM_CONNECTION') }}"
#         TYPEORM_HOST: "{{ lookup('env','TYPEORM_HOST') }}"
#         TYPEORM_PORT: "{{ lookup('env', 'TYPEORM_PORT') }}"
#         TYPEORM_USERNAME: "{{ lookup('env','TYPEORM_USERNAME') }}"
#         TYPEORM_PASSWORD: "{{ lookup('env','TYPEORM_PASSWORD') }}"
#         TYPEORM_DATABASE: "{{ lookup('env','TYPEORM_DATABASE') }}"
#         TYPEORM_MIGRATIONS: "{{ lookup('env','TYPEORM_MIGRATIONS') }}"
#         TYPEORM_ENTITIES: "{{ lookup('env','TYPEORM_ENTITIES') }}"
      
#   roles:
#     - deploy







































# - name: extract artifact
#   become: yes
#   unarchive:
#     src: files/artifact.tar.gz
#     dest: .
    
# - name: start app
#   become: yes
#   shell: |
#     npm install
#     pm2 stop all
#     pm2 start npm --name "udapeople-backend" -- run start
    
#   environment:
#     NODE_ENV: "{{ lookup('env', 'NODE_ENV') }}"
#     VERSION: "{{ lookup('env', 'VERSION') }}"
#     TYPEORM_CONNECTION: "{{ lookup('env', 'TYPEORM_CONNECTION') }}"
#     TYPEORM_MIGRATIONS_DIR: "{{ lookup('env', 'TYPEORM_MIGRATIONS_DIR') }}"
#     TYPEORM_ENTITIES: "{{ lookup('env', 'TYPEORM_ENTITIES') }}"
#     TYPEORM_MIGRATIONS: "{{ lookup('env', 'TYPEORM_MIGRATIONS') }}"
#     TYPEORM_HOST: "{{ lookup('env', 'TYPEORM_HOST') }}"
#     TYPEORM_PORT: "{{ lookup('env', 'TYPEORM_PORT') }}"
#     TYPEORM_USERNAME: "{{ lookup('env', 'TYPEORM_USERNAME') }}"
#     TYPEORM_PASSWORD: "{{ lookup('env', 'TYPEORM_PASSWORD') }}"
#     TYPEORM_DATABASE: "{{ lookup('env', 'TYPEORM_DATABASE') }}"
    
# - name: "Set pm2 start as service"
#   become: yes
#   shell: |
#     env PATH=$PATH:/usr/local/bin pm2 startup -u ubuntu
# - name: check pm2 status
#   become: yes
#   shell: |
#     pm2 describe "udapeople-backend"
#   register: command_output_npm
# - debug: var=command_output_npm.stdout_lines












































# ---
# - name: "configuration play." 
#   hosts: web
#   user: ubuntu
#   become: true
#   become_method: sudo
#   become_user: root  
#   gather_facts: false
#   vars:
#     ansible_python_interpreter: /usr/bin/python3
#     ansible_host_key_checking: false
#     ansible_stdout_callback: yaml
  
#   environment:
#     NODE_ENV: "{{ lookup('env', 'NODE_ENV') }}"
#     VERSION: "{{ lookup('env', 'VERSION') }}"
#     TYPEORM_CONNECTION: "{{ lookup('env', 'TYPEORM_CONNECTION') }}"
#     TYPEORM_MIGRATIONS_DIR: "{{ lookup('env', 'TYPEORM_MIGRATIONS_DIR') }}"
#     TYPEORM_ENTITIES: "{{ lookup('env', 'TYPEORM_ENTITIES') }}"
#     TYPEORM_MIGRATIONS: "{{ lookup('env', 'TYPEORM_MIGRATIONS') }}"
#     TYPEORM_HOST: "{{ lookup('env', 'TYPEORM_HOST') }}"
#     TYPEORM_PORT: "{{ lookup('env', 'TYPEORM_PORT') }}"
#     TYPEORM_USERNAME: "{{ lookup('env', 'TYPEORM_USERNAME') }}"
#     TYPEORM_PASSWORD: "{{ lookup('env', 'TYPEORM_PASSWORD') }}"
#     TYPEORM_DATABASE: "{{ lookup('env', 'TYPEORM_DATABASE') }}"
  # pre_tasks:
  # - name: wait 600 seconds for target connection to become reachable/usable.
  #   wait_for_connection: null
  #   timeout: 600
  # - name: install python for Ansible.
  #   apt:
  #     name: python3
  # - name: update apt list
  #   become: true
  #   apt:
  #     update_cache: yes
  # - setup: null

  # - name: Creates backend app directory
  #   file:
  #     path: ~/backend-app
  #     state: directory
  # - name: Unarchive backend files
  #   unarchive:
  #     src: artifact.tar.gz
  #     dest: ~/backend-app
  # - name: Installing Node Dependencies
  #   shell: |
  #     cd ~/backend-app
  #     npm I
  # - name: Executing Node app with PM2
  #   shell: |
  #     cd ~/backend-app/dist
  #     pm2 stop default
  #     pm2 start main.js
  #   register: execute_node

  # # - name: print message
  # #   debug: null
  # #   msg: "{{ execute_node.stdout_lines }}"
  # - name: Configure pm2 to start as service
  #   shell: >
  #     sudo su -c "env PATH=$PATH:/usr/local/bin pm2 startup systemd -u ubuntu
  #     --hp /home/ubuntu"
  #     pm2 save
  # # roles:
  # #   - deploy
